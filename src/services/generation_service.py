#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SERVICE DE G√âN√âRATION AM√âLIOR√â AVEC G√âOM√âTRIE - COUCHE SERVICE
=============================================================

Version am√©lior√©e compatible avec electricity_generator.py et water_generator.py
qui utilise la g√©om√©trie pr√©cise des polygones OSM et les donn√©es d'√©tages.
"""

import logging
from typing import Dict, List, Optional
from datetime import datetime
import pandas as pd

from src.core.electricity_generator import EnhancedElectricityGenerator
from src.core.water_generator import WaterGenerator
from src.core.generator import WeatherGenerator  # M√©t√©o reste standard
from src.utils.validators import validate_date_range, validate_frequency
from src.utils.helpers import (generate_session_id, robust_building_list_validation, 
                              normalize_building_data, safe_float_parse)

logger = logging.getLogger(__name__)


class EnhancedGenerationService:
    """Service m√©tier pour la g√©n√©ration de donn√©es am√©lior√© avec g√©om√©trie pr√©cise"""
    
    def __init__(self):
        """Initialise le service de g√©n√©ration am√©lior√©"""
        self.electricity_generator = EnhancedElectricityGenerator()  # Version am√©lior√©e
        self.water_generator = WaterGenerator()  # Version am√©lior√©e
        self.weather_generator = WeatherGenerator()  # Version standard
        self.generation_sessions = []
        logger.info("‚úÖ EnhancedGenerationService initialis√© avec g√©n√©rateurs g√©om√©triques")
    
    def generate_all_data(
        self,
        buildings: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str = '1H',
        weather_stations: int = 5,
        generate_electricity: bool = True,
        generate_water: bool = True,
        generate_weather: bool = True
    ) -> Dict:
        """
        G√©n√®re les donn√©es selon la s√©lection utilisateur - VERSION G√âOM√âTRIQUE AM√âLIOR√âE
        
        Args:
            buildings: Liste des b√¢timents avec g√©om√©trie pr√©cise et √©tages
            start_date: Date d√©but (YYYY-MM-DD)
            end_date: Date fin (YYYY-MM-DD)
            frequency: Fr√©quence d'√©chantillonnage
            weather_stations: Nombre de stations m√©t√©o
            generate_electricity: Si True, g√©n√®re consommation √©lectrique
            generate_water: Si True, g√©n√®re consommation eau
            generate_weather: Si True, g√©n√®re donn√©es m√©t√©o
            
        Returns:
            Dict: R√©sultat avec toutes les donn√©es g√©n√©r√©es
        """
        session_id = generate_session_id()
        start_time = datetime.now()
        
        try:
            logger.info(f"üîÑ Session g√©n√©ration am√©lior√©e: {session_id}")
            
            # Types s√©lectionn√©s
            selected_types = []
            if generate_electricity:
                selected_types.append('√©lectricit√© (g√©om√©trique)')
            if generate_water:
                selected_types.append('eau (g√©om√©trique)')
            if generate_weather:
                selected_types.append('m√©t√©o')
            
            logger.info(f"üìä G√©n√©ration am√©lior√©e: {len(buildings)} b√¢timents, types: {', '.join(selected_types)}")
            
            # VALIDATION ROBUSTE avec analyse g√©om√©trique
            validation_result = self._validate_enhanced_generation_parameters(
                buildings, start_date, end_date, frequency, weather_stations
            )
            
            if not validation_result['valid']:
                logger.error(f"‚ùå Validation √©chou√©e: {validation_result['errors']}")
                return {
                    'success': False,
                    'error': 'Param√®tres invalides',
                    'validation_errors': validation_result['errors'],
                    'session_id': session_id
                }
            
            # Validation qu'au moins un type est s√©lectionn√©
            if not any([generate_electricity, generate_water, generate_weather]):
                return {
                    'success': False,
                    'error': 'Aucun type de donn√©es s√©lectionn√©',
                    'session_id': session_id
                }
            
            # PR√âTRAITEMENT DES B√ÇTIMENTS AM√âLIOR√â
            if buildings and (generate_electricity or generate_water):
                logger.info("üèóÔ∏è Pr√©traitement g√©om√©trique des b√¢timents...")
                processed_buildings = self._preprocess_enhanced_buildings(buildings)
                logger.info(f"‚úÖ {len(processed_buildings)} b√¢timents pr√©trait√©s avec g√©om√©trie")
                
                # Statistiques g√©om√©triques
                geometry_stats = self._analyze_buildings_geometry(processed_buildings)
                logger.info(f"üìê G√©om√©trie: {geometry_stats['with_precise_geometry']} pr√©cis, "
                          f"{geometry_stats['with_floors_data']} avec √©tages")
            else:
                processed_buildings = []
                geometry_stats = {}
            
            # R√©sultats de g√©n√©ration
            results = {
                'consumption_data': None,
                'water_data': None,
                'weather_data': None
            }
            
            summary = {
                'consumption_points': 0,
                'water_points': 0,
                'weather_points': 0,
                'buildings_count': len(processed_buildings),
                'geometry_statistics': geometry_stats
            }
            
            # === G√âN√âRATION √âLECTRICIT√â AM√âLIOR√âE ===
            if generate_electricity and processed_buildings:
                logger.info("‚ö° G√©n√©ration √©lectricit√© avec g√©om√©trie pr√©cise...")
                try:
                    electricity_result = self.electricity_generator.generate_consumption_timeseries(
                        buildings=processed_buildings,
                        start_date=start_date,
                        end_date=end_date,
                        frequency=frequency
                    )
                    
                    if electricity_result['success']:
                        results['consumption_data'] = electricity_result['data']
                        summary['consumption_points'] = electricity_result['metadata']['total_points']
                        summary['electricity_geometry_stats'] = electricity_result['metadata'].get('geometry_statistics', {})
                        logger.info(f"‚úÖ √âlectricit√© g√©om√©trique: {summary['consumption_points']} points g√©n√©r√©s")
                    else:
                        logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration √©lectricit√©: {electricity_result['error']}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Exception g√©n√©ration √©lectricit√©: {e}")
            
            # === G√âN√âRATION EAU AM√âLIOR√âE ===
            if generate_water and processed_buildings:
                logger.info("üíß G√©n√©ration eau avec g√©om√©trie pr√©cise...")
                try:
                    water_result = self.water_generator.generate_water_consumption_timeseries(
                        buildings=processed_buildings,
                        start_date=start_date,
                        end_date=end_date,
                        frequency=frequency
                    )
                    
                    if water_result['success']:
                        results['water_data'] = water_result['data']
                        summary['water_points'] = water_result['metadata']['total_points']
                        summary['water_geometry_stats'] = water_result['metadata'].get('water_statistics', {})
                        logger.info(f"‚úÖ Eau g√©om√©trique: {summary['water_points']} points g√©n√©r√©s")
                    else:
                        logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration eau: {water_result['error']}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Exception g√©n√©ration eau: {e}")
            
            # === G√âN√âRATION M√âT√âO (STANDARD) ===
            if generate_weather:
                logger.info("üå§Ô∏è G√©n√©ration donn√©es m√©t√©orologiques...")
                try:
                    weather_result = self.weather_generator.generate_weather_timeseries(
                        start_date=start_date,
                        end_date=end_date,
                        frequency=frequency,
                        station_count=weather_stations
                    )
                    
                    if weather_result['success']:
                        results['weather_data'] = weather_result['data']
                        summary['weather_points'] = weather_result['metadata']['total_observations']
                        logger.info(f"‚úÖ M√©t√©o: {summary['weather_points']} points g√©n√©r√©s")
                    else:
                        logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration m√©t√©o: {weather_result['error']}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Exception g√©n√©ration m√©t√©o: {e}")
            
            # Calcul du temps total
            generation_time = (datetime.now() - start_time).total_seconds()
            
            # Enregistrement de la session am√©lior√©e
            session_info = {
                'session_id': session_id,
                'generation_time': start_time.isoformat(),
                'generation_duration_seconds': generation_time,
                'enhanced_features': True,
                'geometry_processing': True,
                'parameters': {
                    'start_date': start_date,
                    'end_date': end_date,
                    'frequency': frequency,
                    'weather_stations': weather_stations,
                    'generate_electricity': generate_electricity,
                    'generate_water': generate_water,
                    'generate_weather': generate_weather
                },
                'summary': summary
            }
            
            self.generation_sessions.append(session_info)
            
            # Garde seulement les 20 derni√®res sessions
            if len(self.generation_sessions) > 20:
                self.generation_sessions = self.generation_sessions[-20:]
            
            # Types g√©n√©r√©s avec succ√®s
            generated_types = []
            if results['consumption_data'] is not None:
                generated_types.append('√©lectricit√© (g√©om√©trique)')
            if results['water_data'] is not None:
                generated_types.append('eau (g√©om√©trique)')
            if results['weather_data'] is not None:
                generated_types.append('m√©t√©o')
            
            # V√©rification qu'au moins quelque chose a √©t√© g√©n√©r√©
            total_generated = summary['consumption_points'] + summary['water_points'] + summary['weather_points']
            
            if total_generated == 0:
                logger.warning("‚ö†Ô∏è Aucune donn√©e g√©n√©r√©e")
                return {
                    'success': False,
                    'error': 'Aucune donn√©e g√©n√©r√©e - v√©rifiez les param√®tres',
                    'session_id': session_id,
                    'summary': summary
                }
            
            logger.info(f"‚úÖ Session am√©lior√©e {session_id} termin√©e: {', '.join(generated_types)} en {generation_time:.1f}s")
            
            return {
                'success': True,
                'session_id': session_id,
                'consumption_data': results['consumption_data'],
                'water_data': results['water_data'],
                'weather_data': results['weather_data'],
                'summary': summary,
                'session_info': session_info,
                'generated_types': generated_types,
                'enhanced_features_used': True
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur service g√©n√©ration am√©lior√©: {e}")
            return {
                'success': False,
                'error': str(e),
                'session_id': session_id
            }
    
    def _validate_enhanced_generation_parameters(
        self,
        buildings: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str,
        weather_stations: int
    ) -> Dict:
        """
        Valide les param√®tres de g√©n√©ration avec v√©rification g√©om√©trique
        
        Args:
            buildings: Liste des b√¢timents avec g√©om√©trie
            start_date: Date d√©but
            end_date: Date fin
            frequency: Fr√©quence
            weather_stations: Nombre de stations m√©t√©o
            
        Returns:
            Dict: R√©sultat de validation am√©lior√©e
        """
        errors = []
        warnings = []
        
        # Validation b√¢timents avec analyse g√©om√©trique
        if not buildings or not isinstance(buildings, list):
            warnings.append("Aucun b√¢timent fourni - seule m√©t√©o sera g√©n√©r√©e")
        elif len(buildings) == 0:
            warnings.append("Liste de b√¢timents vide - seule m√©t√©o sera g√©n√©r√©e")
        else:
            # Validation g√©om√©trique des b√¢timents
            geometry_analysis = self._quick_geometry_analysis(buildings)
            
            if geometry_analysis['valid_buildings'] == 0:
                errors.append("Aucun b√¢timent valide avec g√©om√©trie")
            elif geometry_analysis['geometry_rate'] < 0.5:
                warnings.append(f"Peu de b√¢timents avec g√©om√©trie pr√©cise ({geometry_analysis['geometry_rate']:.1%})")
            
            if geometry_analysis['floors_rate'] < 0.3:
                warnings.append(f"Peu de donn√©es d'√©tages disponibles ({geometry_analysis['floors_rate']:.1%})")
        
        # Validation dates (stricte - c'est critique)
        if not start_date or not end_date:
            errors.append("Dates de d√©but et fin requises")
        elif not validate_date_range(start_date, end_date):
            errors.append("Plage de dates invalide")
        else:
            try:
                start = datetime.strptime(start_date, '%Y-%m-%d')
                end = datetime.strptime(end_date, '%Y-%m-%d')
                duration_days = (end - start).days
                
                if duration_days > 365:
                    warnings.append("P√©riode tr√®s longue (>1 an)")
                elif duration_days < 0:
                    errors.append("Date de fin avant date de d√©but")
            except ValueError:
                errors.append("Format de dates invalide (YYYY-MM-DD requis)")
        
        # Validation fr√©quence (stricte)
        if not frequency:
            errors.append("Fr√©quence requise")
        elif not validate_frequency(frequency):
            errors.append(f"Fr√©quence non support√©e: {frequency}")
        
        # Validation stations m√©t√©o (permissive)
        try:
            stations = int(weather_stations)
            if stations < 1:
                warnings.append("Nombre de stations m√©t√©o < 1 - utilisation de 1")
            elif stations > 50:
                warnings.append("Nombre tr√®s √©lev√© de stations m√©t√©o")
        except (ValueError, TypeError):
            warnings.append("Nombre de stations m√©t√©o invalide - utilisation de 5")
        
        return {
            'valid': len(errors) == 0,  # Seules les erreurs critiques bloquent
            'errors': errors,
            'warnings': warnings
        }
    
    def _quick_geometry_analysis(self, buildings: List[Dict]) -> Dict:
        """
        Analyse rapide de la qualit√© g√©om√©trique des b√¢timents
        
        Args:
            buildings: Liste des b√¢timents
            
        Returns:
            Dict: Analyse de qualit√© g√©om√©trique
        """
        if not buildings:
            return {
                'valid_buildings': 0,
                'geometry_rate': 0.0,
                'floors_rate': 0.0
            }
        
        # √âchantillonnage pour performance
        sample_size = min(50, len(buildings))
        sample = buildings[:sample_size]
        
        valid_buildings = 0
        with_geometry = 0
        with_floors = 0
        
        for building in sample:
            if isinstance(building, dict) and building:
                valid_buildings += 1
                
                # V√©rification g√©om√©trie
                geometry = building.get('geometry', [])
                if geometry and len(geometry) >= 3:
                    with_geometry += 1
                
                # V√©rification √©tages
                floors = building.get('floors_count') or building.get('building_levels')
                if floors and floors > 1:
                    with_floors += 1
        
        # Extrapolation si √©chantillon
        if sample_size < len(buildings):
            factor = len(buildings) / sample_size
            valid_buildings = int(valid_buildings * factor)
            with_geometry = int(with_geometry * factor)
            with_floors = int(with_floors * factor)
        
        return {
            'valid_buildings': valid_buildings,
            'geometry_rate': with_geometry / len(buildings) if buildings else 0,
            'floors_rate': with_floors / len(buildings) if buildings else 0,
            'sample_size': sample_size
        }
    
    def _preprocess_enhanced_buildings(self, buildings: List[Dict]) -> List[Dict]:
        """
        Pr√©traite les b√¢timents pour la g√©n√©ration g√©om√©trique am√©lior√©e
        
        Args:
            buildings: Liste des b√¢timents bruts
            
        Returns:
            List[Dict]: B√¢timents pr√©trait√©s et enrichis
        """
        processed_buildings = []
        
        for i, building in enumerate(buildings):
            try:
                # Normalisation de base
                normalized = normalize_building_data(building)
                
                # Enrichissement g√©om√©trique
                enhanced = self._enhance_building_geometry(normalized, i)
                
                # Enrichissement m√©tadonn√©es √©tages
                enhanced = self._enhance_building_floors(enhanced)
                
                # Validation finale
                if self._is_valid_enhanced_building(enhanced):
                    processed_buildings.append(enhanced)
                
            except Exception as e:
                logger.debug(f"Erreur pr√©traitement b√¢timent {i}: {e}")
                # B√¢timent de fallback minimal
                fallback = self._create_fallback_building(i)
                processed_buildings.append(fallback)
        
        return processed_buildings
    
    def _enhance_building_geometry(self, building: Dict, index: int) -> Dict:
        """
        Enrichit les donn√©es g√©om√©triques d'un b√¢timent
        
        Args:
            building: B√¢timent normalis√©
            index: Index du b√¢timent
            
        Returns:
            Dict: B√¢timent avec g√©om√©trie enrichie
        """
        enhanced = building.copy()
        
        # V√©rification g√©om√©trie existante
        geometry = building.get('geometry', [])
        
        if geometry and len(geometry) >= 3:
            # G√©om√©trie pr√©cise disponible
            enhanced['has_precise_geometry'] = True
            enhanced['geometry_source'] = 'osm_polygon'
            
            # Calcul surface pr√©cise si pas d√©j√† fait
            if 'polygon_area_m2' not in enhanced:
                enhanced['polygon_area_m2'] = self._calculate_polygon_area_simple(geometry)
            
            # Utilise la surface du polygone si disponible
            if enhanced['polygon_area_m2'] > 0:
                enhanced['surface_area_m2'] = enhanced['polygon_area_m2']
            
        else:
            # Pas de g√©om√©trie pr√©cise - cr√©er g√©om√©trie approximative
            enhanced['has_precise_geometry'] = False
            enhanced['geometry_source'] = 'estimated'
            enhanced['geometry'] = self._create_approximate_geometry(building)
            enhanced['polygon_area_m2'] = enhanced.get('surface_area_m2', 100.0)
        
        # M√©tadonn√©es g√©om√©triques
        enhanced['geometry_metadata'] = {
            'has_precise_geometry': enhanced['has_precise_geometry'],
            'geometry_source': enhanced['geometry_source'],
            'points_count': len(enhanced.get('geometry', [])),
            'polygon_area_m2': enhanced.get('polygon_area_m2', 0)
        }
        
        return enhanced
    
    def _enhance_building_floors(self, building: Dict) -> Dict:
        """
        Enrichit les donn√©es d'√©tages d'un b√¢timent
        
        Args:
            building: B√¢timent avec g√©om√©trie
            
        Returns:
            Dict: B√¢timent avec donn√©es d'√©tages enrichies
        """
        enhanced = building.copy()
        
        # Extraction √©tages depuis diverses sources
        floors_count = None
        floors_source = 'estimated'
        floors_confidence = 'low'
        
        # Sources prioritaires
        floors_sources = [
            (building.get('building_levels'), 'building_levels', 'high'),
            (building.get('floors_count'), 'floors_count', 'high'),
            (building.get('levels'), 'levels', 'medium'),
            (building.get('osm_tags', {}).get('building:levels'), 'osm:building:levels', 'high'),
            (building.get('tags', {}).get('building:levels'), 'tags:building:levels', 'high'),
            (building.get('osm_tags', {}).get('levels'), 'osm:levels', 'medium'),
            (building.get('tags', {}).get('levels'), 'tags:levels', 'medium')
        ]
        
        for value, source, confidence in floors_sources:
            if value is not None:
                try:
                    floors = int(float(value))
                    if 1 <= floors <= 200:
                        floors_count = floors
                        floors_source = source
                        floors_confidence = confidence
                        break
                except (ValueError, TypeError):
                    continue
        
        # Estimation si pas de donn√©es
        if floors_count is None:
            building_type = building.get('building_type', 'residential')
            floors_count = self._estimate_floors_by_type(building_type)
            floors_source = 'type_estimation'
            floors_confidence = 'low'
        
        # Application des donn√©es d'√©tages
        enhanced['floors_count'] = floors_count
        enhanced['building_levels'] = floors_count
        enhanced['levels_source'] = floors_source
        enhanced['levels_confidence'] = floors_confidence
        
        # M√©tadonn√©es d'√©tages
        enhanced['floors_metadata'] = {
            'floors_count': floors_count,
            'source': floors_source,
            'confidence': floors_confidence,
            'estimated': floors_source.endswith('estimation')
        }
        
        return enhanced
    
    def _estimate_floors_by_type(self, building_type: str) -> int:
        """
        Estime le nombre d'√©tages selon le type de b√¢timent
        
        Args:
            building_type: Type de b√¢timent
            
        Returns:
            int: Nombre d'√©tages estim√©
        """
        import numpy as np
        
        if building_type == 'residential':
            return np.random.choice([1, 2, 3], p=[0.6, 0.3, 0.1])
        elif building_type in ['office', 'commercial']:
            return np.random.choice([1, 2, 3, 4, 5, 6], p=[0.2, 0.3, 0.2, 0.15, 0.1, 0.05])
        elif building_type == 'industrial':
            return np.random.choice([1, 2], p=[0.8, 0.2])
        elif building_type == 'hospital':
            return np.random.choice([2, 3, 4, 5], p=[0.2, 0.4, 0.3, 0.1])
        else:
            return 1
    
    def _calculate_polygon_area_simple(self, geometry: List[Dict]) -> float:
        """
        Calcule la surface d'un polygone de mani√®re simplifi√©e
        
        Args:
            geometry: Points du polygone
            
        Returns:
            float: Surface en m¬≤
        """
        if not geometry or len(geometry) < 3:
            return 100.0
        
        try:
            # Extraction coordonn√©es
            coordinates = []
            for point in geometry:
                if isinstance(point, dict) and 'lat' in point and 'lon' in point:
                    coordinates.append((point['lat'], point['lon']))
                elif isinstance(point, (list, tuple)) and len(point) >= 2:
                    coordinates.append((point[0], point[1]))
            
            if len(coordinates) < 3:
                return 100.0
            
            # Shoelace simple
            area = 0.0
            n = len(coordinates)
            for i in range(n):
                j = (i + 1) % n
                area += coordinates[i][0] * coordinates[j][1]
                area -= coordinates[j][0] * coordinates[i][1]
            
            area = abs(area) / 2.0
            
            # Conversion approximative en m¬≤
            area_m2 = area * (111000 ** 2)
            
            return max(min(area_m2, 100000), 10.0)
            
        except Exception:
            return 100.0
    
    def _create_approximate_geometry(self, building: Dict) -> List[Dict]:
        """
        Cr√©e une g√©om√©trie approximative pour un b√¢timent sans polygone
        
        Args:
            building: Donn√©es du b√¢timent
            
        Returns:
            List[Dict]: G√©om√©trie approximative (carr√©)
        """
        lat = building.get('latitude', 3.1390)
        lon = building.get('longitude', 101.6869)
        surface = building.get('surface_area_m2', 100.0)
        
        # Calcul c√¥t√© du carr√© √©quivalent
        side_m = (surface ** 0.5)
        
        # Conversion en degr√©s (approximatif)
        side_deg = side_m / 111000
        
        # Carr√© centr√© sur les coordonn√©es
        geometry = [
            {'lat': lat - side_deg/2, 'lon': lon - side_deg/2},
            {'lat': lat - side_deg/2, 'lon': lon + side_deg/2},
            {'lat': lat + side_deg/2, 'lon': lon + side_deg/2},
            {'lat': lat + side_deg/2, 'lon': lon - side_deg/2},
            {'lat': lat - side_deg/2, 'lon': lon - side_deg/2}  # Fermeture
        ]
        
        return geometry
    
    def _is_valid_enhanced_building(self, building: Dict) -> bool:
        """
        V√©rifie si un b√¢timent enrichi est valide
        
        Args:
            building: B√¢timent enrichi
            
        Returns:
            bool: True si valide
        """
        # V√©rifications de base
        if not isinstance(building, dict):
            return False
        
        # ID requis
        if not building.get('unique_id'):
            return False
        
        # Coordonn√©es requises
        lat = building.get('latitude')
        lon = building.get('longitude')
        if lat is None or lon is None:
            return False
        
        # Coordonn√©es Malaysia
        if not (0.5 <= lat <= 7.5 and 99.0 <= lon <= 120.0):
            return False
        
        # Surface positive
        surface = building.get('surface_area_m2', 0)
        if surface <= 0:
            return False
        
        # √âtages positifs
        floors = building.get('floors_count', 0)
        if floors < 1:
            return False
        
        return True
    
    def _create_fallback_building(self, index: int) -> Dict:
        """
        Cr√©e un b√¢timent de fallback minimal
        
        Args:
            index: Index du b√¢timent
            
        Returns:
            Dict: B√¢timent de fallback
        """
        return {
            'unique_id': f'fallback_enhanced_{index}',
            'building_type': 'residential',
            'latitude': 3.1390 + (index % 10) * 0.001,
            'longitude': 101.6869 + (index % 10) * 0.001,
            'surface_area_m2': 100.0,
            'floors_count': 1,
            'zone_name': 'unknown',
            'source': 'fallback_enhanced',
            'has_precise_geometry': False,
            'geometry': self._create_approximate_geometry({
                'latitude': 3.1390 + (index % 10) * 0.001,
                'longitude': 101.6869 + (index % 10) * 0.001,
                'surface_area_m2': 100.0
            }),
            'polygon_area_m2': 100.0,
            'building_levels': 1,
            'levels_source': 'fallback',
            'levels_confidence': 'low',
            'geometry_metadata': {
                'has_precise_geometry': False,
                'geometry_source': 'fallback',
                'points_count': 5,
                'polygon_area_m2': 100.0
            },
            'floors_metadata': {
                'floors_count': 1,
                'source': 'fallback',
                'confidence': 'low',
                'estimated': True
            }
        }
    
    def _analyze_buildings_geometry(self, buildings: List[Dict]) -> Dict:
        """
        Analyse la g√©om√©trie des b√¢timents pr√©trait√©s
        
        Args:
            buildings: B√¢timents pr√©trait√©s
            
        Returns:
            Dict: Statistiques g√©om√©triques
        """
        if not buildings:
            return {}
        
        total = len(buildings)
        with_precise_geometry = sum(1 for b in buildings if b.get('has_precise_geometry', False))
        with_floors_data = sum(1 for b in buildings if b.get('levels_confidence', 'low') != 'low')
        multi_floor = sum(1 for b in buildings if b.get('floors_count', 1) > 1)
        
        total_surface = sum(b.get('surface_area_m2', 0) for b in buildings)
        total_floors = sum(b.get('floors_count', 1) for b in buildings)
        
        return {
            'total_buildings': total,
            'with_precise_geometry': with_precise_geometry,
            'with_floors_data': with_floors_data,
            'multi_floor_buildings': multi_floor,
            'geometry_rate': round(with_precise_geometry / total, 3),
            'floors_data_rate': round(with_floors_data / total, 3),
            'multi_floor_rate': round(multi_floor / total, 3),
            'total_surface_area_m2': round(total_surface, 1),
            'average_surface_area_m2': round(total_surface / total, 1),
            'total_floors': total_floors,
            'average_floors': round(total_floors / total, 2)
        }
    
    # M√©thodes de g√©n√©ration sp√©cialis√©es
    def generate_electricity_only(
        self,
        buildings: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str = '1H'
    ) -> Dict:
        """G√©n√®re uniquement les donn√©es √©lectriques avec g√©om√©trie"""
        return self.generate_all_data(
            buildings=buildings,
            start_date=start_date,
            end_date=end_date,
            frequency=frequency,
            generate_electricity=True,
            generate_water=False,
            generate_weather=False
        )
    
    def generate_water_only(
        self,
        buildings: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str = '1H'
    ) -> Dict:
        """G√©n√®re uniquement les donn√©es d'eau avec g√©om√©trie"""
        return self.generate_all_data(
            buildings=buildings,
            start_date=start_date,
            end_date=end_date,
            frequency=frequency,
            generate_electricity=False,
            generate_water=True,
            generate_weather=False
        )
    
    def generate_weather_only(
        self,
        start_date: str,
        end_date: str,
        frequency: str = '1H',
        weather_stations: int = 5
    ) -> Dict:
        """G√©n√®re uniquement les donn√©es m√©t√©o (standard)"""
        return self.generate_all_data(
            buildings=[],
            start_date=start_date,
            end_date=end_date,
            frequency=frequency,
            weather_stations=weather_stations,
            generate_electricity=False,
            generate_water=False,
            generate_weather=True
        )
    
    def get_service_statistics(self) -> Dict:
        """Retourne les statistiques du service am√©lior√©"""
        if not self.generation_sessions:
            return {
                'total_sessions': 0,
                'average_generation_time': 0,
                'total_points_generated': 0,
                'enhanced_features': True
            }
        
        # Calculs statistiques
        total_sessions = len(self.generation_sessions)
        total_time = sum(s['generation_duration_seconds'] for s in self.generation_sessions)
        avg_time = total_time / total_sessions
        
        total_consumption = sum(s['summary']['consumption_points'] for s in self.generation_sessions)
        total_water = sum(s['summary']['water_points'] for s in self.generation_sessions)
        total_weather = sum(s['summary']['weather_points'] for s in self.generation_sessions)
        
        # Sessions avec fonctionnalit√©s am√©lior√©es
        enhanced_sessions = sum(1 for s in self.generation_sessions if s.get('enhanced_features', False))
        
        # R√©partition par type
        type_counts = {'electricity': 0, 'water': 0, 'weather': 0}
        for session in self.generation_sessions:
            params = session['parameters']
            if params.get('generate_electricity'):
                type_counts['electricity'] += 1
            if params.get('generate_water'):
                type_counts['water'] += 1
            if params.get('generate_weather'):
                type_counts['weather'] += 1
        
        return {
            'total_sessions': total_sessions,
            'enhanced_sessions': enhanced_sessions,
            'enhancement_rate': round(enhanced_sessions / total_sessions, 3),
            'average_generation_time_seconds': round(avg_time, 2),
            'total_points_generated': {
                'consumption': total_consumption,
                'water': total_water,
                'weather': total_weather,
                'total': total_consumption + total_water + total_weather
            },
            'generation_type_distribution': type_counts,
            'recent_sessions': self.generation_sessions[-5:],
            'generators_status': {
                'electricity_generation_count': self.electricity_generator.generation_count,
                'weather_generation_count': self.weather_generator.generation_count,
                'water_generation_count': self.water_generator.generation_count
            },
            'enhanced_features': {
                'geometry_processing': True,
                'floors_extraction': True,
                'precise_surface_calculation': True,
                'shape_analysis': True
            }
        }