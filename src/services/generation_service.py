#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SERVICE DE G√âN√âRATION CORRIG√â - COUCHE SERVICE
==============================================

Version corrig√©e avec validation robuste et permissive.
"""

import logging
from typing import Dict, List, Optional
from datetime import datetime
import pandas as pd

from src.core.generator import ElectricityGenerator, WeatherGenerator, WaterGenerator
from src.utils.validators import validate_date_range, validate_frequency
from src.utils.helpers import (generate_session_id, robust_building_list_validation, 
                              normalize_building_data, safe_float_parse)

logger = logging.getLogger(__name__)


class GenerationService:
    """Service m√©tier pour la g√©n√©ration de donn√©es - VERSION CORRIG√âE"""
    
    def __init__(self):
        """Initialise le service de g√©n√©ration"""
        self.electricity_generator = ElectricityGenerator()
        self.weather_generator = WeatherGenerator()
        self.water_generator = WaterGenerator()
        self.generation_sessions = []
        logger.info("‚úÖ GenerationService initialis√© avec g√©n√©rateurs √©lectricit√©, m√©t√©o et eau")
    
    def generate_all_data(
        self,
        buildings: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str = '1H',
        weather_stations: int = 5,
        generate_electricity: bool = True,
        generate_water: bool = True,
        generate_weather: bool = True
    ) -> Dict:
        """
        G√©n√®re les donn√©es selon la s√©lection utilisateur - VERSION ROBUSTE
        
        Args:
            buildings: Liste des b√¢timents
            start_date: Date d√©but (YYYY-MM-DD)
            end_date: Date fin (YYYY-MM-DD)
            frequency: Fr√©quence d'√©chantillonnage
            weather_stations: Nombre de stations m√©t√©o
            generate_electricity: Si True, g√©n√®re consommation √©lectrique
            generate_water: Si True, g√©n√®re consommation eau
            generate_weather: Si True, g√©n√®re donn√©es m√©t√©o
            
        Returns:
            Dict: R√©sultat avec toutes les donn√©es g√©n√©r√©es
        """
        session_id = generate_session_id()
        start_time = datetime.now()
        
        try:
            logger.info(f"üîÑ Session g√©n√©ration: {session_id}")
            
            # Types s√©lectionn√©s
            selected_types = []
            if generate_electricity:
                selected_types.append('√©lectricit√©')
            if generate_water:
                selected_types.append('eau')
            if generate_weather:
                selected_types.append('m√©t√©o')
            
            logger.info(f"üìä G√©n√©ration: {len(buildings)} b√¢timents, types: {', '.join(selected_types)}")
            
            # VALIDATION ROBUSTE (ne bloque plus sur les d√©tails)
            validation_result = self._validate_generation_parameters_robust(
                buildings, start_date, end_date, frequency, weather_stations
            )
            
            if not validation_result['valid']:
                logger.error(f"‚ùå Validation √©chou√©e: {validation_result['errors']}")
                return {
                    'success': False,
                    'error': 'Param√®tres invalides',
                    'validation_errors': validation_result['errors'],
                    'session_id': session_id
                }
            
            # Validation qu'au moins un type est s√©lectionn√©
            if not any([generate_electricity, generate_water, generate_weather]):
                return {
                    'success': False,
                    'error': 'Aucun type de donn√©es s√©lectionn√©',
                    'session_id': session_id
                }
            
            # NORMALISATION DES B√ÇTIMENTS (robuste)
            if buildings and (generate_electricity or generate_water):
                logger.info("üèóÔ∏è Normalisation des donn√©es de b√¢timents...")
                normalized_buildings = robust_building_list_validation(buildings)
                logger.info(f"‚úÖ {len(normalized_buildings)} b√¢timents normalis√©s")
            else:
                normalized_buildings = []
            
            # R√©sultats de g√©n√©ration
            results = {
                'consumption_data': None,
                'water_data': None,
                'weather_data': None
            }
            
            summary = {
                'consumption_points': 0,
                'water_points': 0,
                'weather_points': 0,
                'buildings_count': len(normalized_buildings)
            }
            
            # === G√âN√âRATION √âLECTRICIT√â ===
            if generate_electricity and normalized_buildings:
                logger.info("‚ö° G√©n√©ration des donn√©es √©lectriques...")
                try:
                    electricity_result = self.electricity_generator.generate_consumption_timeseries(
                        buildings=normalized_buildings,
                        start_date=start_date,
                        end_date=end_date,
                        frequency=frequency
                    )
                    
                    if electricity_result['success']:
                        results['consumption_data'] = electricity_result['data']
                        summary['consumption_points'] = electricity_result['metadata']['total_points']
                        logger.info(f"‚úÖ √âlectricit√©: {summary['consumption_points']} points g√©n√©r√©s")
                    else:
                        logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration √©lectricit√©: {electricity_result['error']}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Exception g√©n√©ration √©lectricit√©: {e}")
            
            # === G√âN√âRATION EAU ===
            if generate_water and normalized_buildings:
                logger.info("üíß G√©n√©ration des donn√©es de consommation d'eau...")
                try:
                    water_result = self.water_generator.generate_water_consumption_timeseries(
                        buildings=normalized_buildings,
                        start_date=start_date,
                        end_date=end_date,
                        frequency=frequency
                    )
                    
                    if water_result['success']:
                        results['water_data'] = water_result['data']
                        summary['water_points'] = water_result['metadata']['total_points']
                        logger.info(f"‚úÖ Eau: {summary['water_points']} points g√©n√©r√©s")
                    else:
                        logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration eau: {water_result['error']}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Exception g√©n√©ration eau: {e}")
            
            # === G√âN√âRATION M√âT√âO ===
            if generate_weather:
                logger.info("üå§Ô∏è G√©n√©ration des donn√©es m√©t√©orologiques...")
                try:
                    weather_result = self.weather_generator.generate_weather_timeseries(
                        start_date=start_date,
                        end_date=end_date,
                        frequency=frequency,
                        station_count=weather_stations
                    )
                    
                    if weather_result['success']:
                        results['weather_data'] = weather_result['data']
                        summary['weather_points'] = weather_result['metadata']['total_observations']
                        logger.info(f"‚úÖ M√©t√©o: {summary['weather_points']} points g√©n√©r√©s")
                    else:
                        logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration m√©t√©o: {weather_result['error']}")
                        
                except Exception as e:
                    logger.error(f"‚ùå Exception g√©n√©ration m√©t√©o: {e}")
            
            # Calcul du temps total
            generation_time = (datetime.now() - start_time).total_seconds()
            
            # Enregistrement de la session
            session_info = {
                'session_id': session_id,
                'generation_time': start_time.isoformat(),
                'generation_duration_seconds': generation_time,
                'parameters': {
                    'start_date': start_date,
                    'end_date': end_date,
                    'frequency': frequency,
                    'weather_stations': weather_stations,
                    'generate_electricity': generate_electricity,
                    'generate_water': generate_water,
                    'generate_weather': generate_weather
                },
                'summary': summary
            }
            
            self.generation_sessions.append(session_info)
            
            # Garde seulement les 20 derni√®res sessions
            if len(self.generation_sessions) > 20:
                self.generation_sessions = self.generation_sessions[-20:]
            
            # Types g√©n√©r√©s avec succ√®s
            generated_types = []
            if results['consumption_data'] is not None:
                generated_types.append('√©lectricit√©')
            if results['water_data'] is not None:
                generated_types.append('eau')
            if results['weather_data'] is not None:
                generated_types.append('m√©t√©o')
            
            # V√©rification qu'au moins quelque chose a √©t√© g√©n√©r√©
            total_generated = summary['consumption_points'] + summary['water_points'] + summary['weather_points']
            
            if total_generated == 0:
                logger.warning("‚ö†Ô∏è Aucune donn√©e g√©n√©r√©e")
                return {
                    'success': False,
                    'error': 'Aucune donn√©e g√©n√©r√©e - v√©rifiez les param√®tres',
                    'session_id': session_id,
                    'summary': summary
                }
            
            logger.info(f"‚úÖ Session {session_id} termin√©e: {', '.join(generated_types)} en {generation_time:.1f}s")
            
            return {
                'success': True,
                'session_id': session_id,
                'consumption_data': results['consumption_data'],
                'water_data': results['water_data'],
                'weather_data': results['weather_data'],
                'summary': summary,
                'session_info': session_info,
                'generated_types': generated_types
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur service g√©n√©ration: {e}")
            return {
                'success': False,
                'error': str(e),
                'session_id': session_id
            }
    
    def _validate_generation_parameters_robust(
        self,
        buildings: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str,
        weather_stations: int
    ) -> Dict:
        """
        Valide les param√®tres de g√©n√©ration de mani√®re TR√àS ROBUSTE
        
        Args:
            buildings: Liste des b√¢timents
            start_date: Date d√©but
            end_date: Date fin
            frequency: Fr√©quence
            weather_stations: Nombre de stations m√©t√©o
            
        Returns:
            Dict: R√©sultat de validation
        """
        errors = []
        warnings = []
        
        # Validation b√¢timents (tr√®s permissive)
        if not buildings or not isinstance(buildings, list):
            warnings.append("Aucun b√¢timent fourni - seule m√©t√©o sera g√©n√©r√©e")
        elif len(buildings) == 0:
            warnings.append("Liste de b√¢timents vide - seule m√©t√©o sera g√©n√©r√©e")
        else:
            # Validation tr√®s basique - juste v√©rifier qu'on a des dictionnaires
            valid_buildings = 0
            for building in buildings[:10]:  # Teste juste les 10 premiers
                if isinstance(building, dict) and building:
                    valid_buildings += 1
            
            if valid_buildings == 0:
                errors.append("Aucun b√¢timent valide dans la liste")
            elif valid_buildings < 5 and len(buildings) >= 10:
                warnings.append("Beaucoup de b√¢timents invalides d√©tect√©s")
        
        # Validation dates (stricte - c'est critique)
        if not start_date or not end_date:
            errors.append("Dates de d√©but et fin requises")
        elif not validate_date_range(start_date, end_date):
            errors.append("Plage de dates invalide")
        else:
            try:
                start = datetime.strptime(start_date, '%Y-%m-%d')
                end = datetime.strptime(end_date, '%Y-%m-%d')
                duration_days = (end - start).days
                
                if duration_days > 365:
                    warnings.append("P√©riode tr√®s longue (>1 an)")
                elif duration_days < 0:
                    errors.append("Date de fin avant date de d√©but")
            except ValueError:
                errors.append("Format de dates invalide (YYYY-MM-DD requis)")
        
        # Validation fr√©quence (stricte)
        if not frequency:
            errors.append("Fr√©quence requise")
        elif not validate_frequency(frequency):
            errors.append(f"Fr√©quence non support√©e: {frequency}")
        
        # Validation stations m√©t√©o (permissive)
        try:
            stations = int(weather_stations)
            if stations < 1:
                warnings.append("Nombre de stations m√©t√©o < 1 - utilisation de 1")
            elif stations > 50:
                warnings.append("Nombre tr√®s √©lev√© de stations m√©t√©o")
        except (ValueError, TypeError):
            warnings.append("Nombre de stations m√©t√©o invalide - utilisation de 5")
        
        return {
            'valid': len(errors) == 0,  # Seules les erreurs critiques bloquent
            'errors': errors,
            'warnings': warnings
        }
    
    def generate_electricity_only(
        self,
        buildings: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str = '1H'
    ) -> Dict:
        """G√©n√®re uniquement les donn√©es √©lectriques"""
        return self.generate_all_data(
            buildings=buildings,
            start_date=start_date,
            end_date=end_date,
            frequency=frequency,
            generate_electricity=True,
            generate_water=False,
            generate_weather=False
        )
    
    def generate_weather_only(
        self,
        start_date: str,
        end_date: str,
        frequency: str = '1H',
        weather_stations: int = 5
    ) -> Dict:
        """G√©n√®re uniquement les donn√©es m√©t√©o"""
        return self.generate_all_data(
            buildings=[],  # Pas de b√¢timents n√©cessaires pour m√©t√©o
            start_date=start_date,
            end_date=end_date,
            frequency=frequency,
            weather_stations=weather_stations,
            generate_electricity=False,
            generate_water=False,
            generate_weather=True
        )
    
    def generate_water_only(
        self,
        buildings: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str = '1H'
    ) -> Dict:
        """G√©n√®re uniquement les donn√©es d'eau"""
        return self.generate_all_data(
            buildings=buildings,
            start_date=start_date,
            end_date=end_date,
            frequency=frequency,
            generate_electricity=False,
            generate_water=True,
            generate_weather=False
        )
    
    def get_service_statistics(self) -> Dict:
        """Retourne les statistiques du service"""
        if not self.generation_sessions:
            return {
                'total_sessions': 0,
                'average_generation_time': 0,
                'total_points_generated': 0
            }
        
        # Calculs statistiques
        total_sessions = len(self.generation_sessions)
        total_time = sum(s['generation_duration_seconds'] for s in self.generation_sessions)
        avg_time = total_time / total_sessions
        
        total_consumption = sum(s['summary']['consumption_points'] for s in self.generation_sessions)
        total_water = sum(s['summary']['water_points'] for s in self.generation_sessions)
        total_weather = sum(s['summary']['weather_points'] for s in self.generation_sessions)
        
        # R√©partition par type
        type_counts = {'electricity': 0, 'water': 0, 'weather': 0}
        for session in self.generation_sessions:
            params = session['parameters']
            if params.get('generate_electricity'):
                type_counts['electricity'] += 1
            if params.get('generate_water'):
                type_counts['water'] += 1
            if params.get('generate_weather'):
                type_counts['weather'] += 1
        
        return {
            'total_sessions': total_sessions,
            'average_generation_time_seconds': round(avg_time, 2),
            'total_points_generated': {
                'consumption': total_consumption,
                'water': total_water,
                'weather': total_weather,
                'total': total_consumption + total_water + total_weather
            },
            'generation_type_distribution': type_counts,
            'recent_sessions': self.generation_sessions[-5:],
            'generators_status': {
                'electricity_generation_count': self.electricity_generator.generation_count,
                'weather_generation_count': self.weather_generator.generation_count,
                'water_generation_count': self.water_generator.generation_count
            }
        }