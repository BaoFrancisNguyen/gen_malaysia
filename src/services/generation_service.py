#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SERVICE DE G√âN√âRATION - COUCHE SERVICE
======================================

Service m√©tier pour orchestrer la g√©n√©ration des donn√©es √©lectriques et m√©t√©o.
Coordonne les appels aux g√©n√©rateurs et g√®re la logique m√©tier.
"""

import logging
from typing import Dict, List
from datetime import datetime
import pandas as pd

from src.core.generator import ElectricityGenerator, WeatherGenerator
from src.utils.validators import validate_date_range, validate_frequency, validate_building_list
from src.utils.helpers import generate_session_id

logger = logging.getLogger(__name__)


class GenerationService:
    """Service m√©tier pour la g√©n√©ration de donn√©es"""
    
    def __init__(self):
        """Initialise le service de g√©n√©ration"""
        self.electricity_generator = ElectricityGenerator()
        self.weather_generator = WeatherGenerator()
        self.water_generator = WaterGenerator()  # Nouveau g√©n√©rateur d'eau
        self.generation_sessions = []
        logger.info("‚úÖ GenerationService initialis√© avec g√©n√©rateur d'eau")
    
    def generate_all_data(
        self,
        buildings: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str = '1H',
        weather_stations: int = 5,
        include_water: bool = True
    ) -> Dict:
        """
        G√©n√®re toutes les donn√©es (√©lectricit√© + m√©t√©o + eau optionnelle)
        
        Args:
            buildings: Liste des b√¢timents
            start_date: Date d√©but (YYYY-MM-DD)
            end_date: Date fin (YYYY-MM-DD)
            frequency: Fr√©quence d'√©chantillonnage
            weather_stations: Nombre de stations m√©t√©o
            include_water: Si True, g√©n√®re aussi la consommation d'eau
            
        Returns:
            Dict: R√©sultat avec toutes les donn√©es g√©n√©r√©es
        """
        session_id = generate_session_id()
        start_time = datetime.now()
        
        try:
            logger.info(f"üîÑ Session g√©n√©ration: {session_id}")
            logger.info(f"üìä G√©n√©ration compl√®te: {len(buildings)} b√¢timents, {weather_stations} stations m√©t√©o, eau: {include_water}")
            
            # Validation des param√®tres
            validation_result = self._validate_generation_parameters(
                buildings, start_date, end_date, frequency, weather_stations
            )
            
            if not validation_result['valid']:
                return {
                    'success': False,
                    'error': 'Param√®tres invalides',
                    'validation_errors': validation_result['errors'],
                    'session_id': session_id
                }
            
            # G√©n√©ration des donn√©es √©lectriques
            logger.info("‚ö° G√©n√©ration des donn√©es √©lectriques...")
            electricity_result = self.electricity_generator.generate_consumption_timeseries(
                buildings=buildings,
                start_date=start_date,
                end_date=end_date,
                frequency=frequency
            )
            
            if not electricity_result['success']:
                return {
                    'success': False,
                    'error': f"Erreur g√©n√©ration √©lectricit√©: {electricity_result['error']}",
                    'session_id': session_id
                }
            
            # G√©n√©ration des donn√©es d'eau (optionnelle)
            water_result = None
            if include_water:
                logger.info("üíß G√©n√©ration des donn√©es de consommation d'eau...")
                water_result = self.water_generator.generate_water_consumption_timeseries(
                    buildings=buildings,
                    start_date=start_date,
                    end_date=end_date,
                    frequency=frequency
                )
                
                if not water_result['success']:
                    logger.warning(f"‚ö†Ô∏è Erreur g√©n√©ration eau (continuant sans): {water_result['error']}")
                    water_result = None
    
    def generate_all_data(
        self,
        buildings: List[Dict],
        start_date: str,
        end_date: str,
        frequency: str = '1H',
        weather_stations: int = 5
    ) -> Dict:
        """
        G√©n√®re toutes les donn√©es (√©lectricit√© + m√©t√©o)
        
        Args:
            buildings: Liste des b√¢timents
            start_date: Date d√©but (YYYY-MM-DD)
            end_date: Date fin (YYYY-MM-DD)
            frequency: Fr√©quence d'√©chantillonnage
            weather_stations: Nombre de stations m√©t√©o
            
        Returns:
            Dict: R√©sultat avec toutes les donn√©es g√©n√©r√©es
        """
        session_id = generate_session_id()
        start_time = datetime.now()
        
        try:
            logger.info(f"üîÑ Session g√©n√©ration: {session_id}")
            logger.info(f"üìä G√©n√©ration compl√®te: {len(buildings)} b√¢timents, {weather_stations} stations m√©t√©o")
            
            # Validation des param√®tres
            validation_result = self._validate_generation_parameters(
                buildings, start_date, end_date, frequency, weather_stations
            )
            
            if not validation_result['valid']:
                return {
                    'success': False,
                    'error': 'Param√®tres invalides',
                    'validation_errors': validation_result['errors'],
                    'session_id': session_id
                }
            
            # G√©n√©ration des donn√©es √©lectriques
            logger.info("‚ö° G√©n√©ration des donn√©es √©lectriques...")
            electricity_result = self.electricity_generator.generate_consumption_timeseries(
                buildings=buildings,
                start_date=start_date,
                end_date=end_date,
                frequency=frequency
            )
            
            if not electricity_result['success']:
                return {
                    '